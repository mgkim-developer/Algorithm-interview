# 부록A
# 코딩 테스트를 위한 파이썬 문법
#-----------------------------------------------------------------------------------------------------------------------
# 1. 자료형
# 수 자료형

# 정수형
# 정수형(Integer)은 정수를 다루는 자료형이며 정수형에는 양의 정수, 음의 정수, 0이 있다.

a = 1000    # 양의 정수
print(a)

a = -7      # 음의 정수
print(a)

# 0
a = 0
print(a)


# 실수형
# 실수형(Real Number)은 소수점 아래의 데이터를 포함하는 수 자료형으로 파이썬에서는 변수에 소수점을 분인 수를 대입하면 실수형 변수로 처리한다.
# 소수부가 0이거나, 정수부가 0인 소수는 0을 생략하고 작성할 수 있다.

# 양의 실수
a = 157.93
print(a)

# 음의 실수
a = -1837.2
print(a)

# 소수부가 0일 때 0을 생략
a = 5
print(a)

# 정수부가 0일 때 0을 생략
a = -7
print(a)
#-----------------------------------------------------------------------------------------------------------------------

# 실수형 데이터를 표현하는 방식으로 파이썬에서는 e나 E를 이용한 지수 표현 방식을 이용할 수 있다.
# e다음에 오는 수는 10의 지수부를 의미한다.
# 예를들어 1e9라고 입력하게 되면, 10의 9제곱(1,000,000,000)이 된다.
# 유효숫자e^지수 = 유효숫자 * 10^지수
# 예를 들어 최단 경로 문제에서는 도달할 수 없는 노드에 대하여 최단 거리르 '무한(INF)'로 설정하곤 한다.
# 최단 경로로 가능한 최댓값이 10억 미만이라면 무한(INF)를 표현할 때 10억을 이용할 수 있다.
# 또한 큰 수를 표현할 때, 0의 개수가 많아지게 되면 햇갈리므로 10억을 코드에 입력하는 것 보다는 1e9로 표현하는 것이 더 실수할 확률이 적다는 장점도 있다.
# 혹은 987,654,321라고 적으면 이게 1e9와 유사할 정도로 크므로 이렇게 적기도 한다.

# 10억의 지수 표현 방식
a = 1e9
print(a)

# 752.5
a = 75.25e1
print(a)

# 3.954
a = 3954e-3
print(a)
#-----------------------------------------------------------------------------------------------------------------------

# 보통 컴퓨터 시스템은 수 데이터를 처리할 때 2진수를 이용하며, 실수를 처리할 때 부동 소수점(Floating-point)방식을 이용한다.
# 오늘날 가장 널리 쓰이는 IEEE754 표준에서는 실수형을 저장하기 위해 4바이트, 혹은 8바이트라는 고정된 크기의 메모리를 할당하며,
# 이러한 이유로 인해 현대 컴퓨터 시스템은 대체로 실수 정보를 표현하는 정확도에 한계를 가진다.
# 예를 들어 10진수 체계에서는 0.3과 0.6을 더한 값이 0.9로 정확히 떨어지지만, 2진수에서는 0.9를 정확히 표현할 수 있는 방법이 없다.
# 물론 최대한 0.9와 가깝게 표현하지만 표현한 값이 정확히 0.9가 아닌 미세한 오차가 발생한다.
# 일반적으로 코딩 테스트 문제를 풀기 위해서 컴퓨터의 내부 동작 방식까지 자세히 알 필요는 없으나 컴퓨터가 실수를 정확히 표현하지 못한다는 사실은 기억하자.
# 다음 예시를 확인해보면, 0.3과 0.6을 더한 값이 0.8999999999999999로 저장되는 것을 알 수 있다.

a = 0.3 + 0.6
print(a)

if a == 0.9:
    print(True)
else:
    print(False)

# 따라서 소수점 값을 비교하는 작업이 필요한 문제라면 실수 값을 비교하지 못해서 원하는 결과를 얻지 못할 수 있다.
# 이럴 때는 round() 함수를 이용할 수 있다.
# round() 함수를 호출할 때는 인자(Argument)를 넣는데 첫 번째 인자는 실수형 데이터이고, 두 번째 인자는 (반올림하고자 하는 위치 -1)이다.
# 예를 들어 123.456을 소수점 셋째 자리에서 반올림 하려면 round(123.456, 2)라고 작성하며 결과는 123.45이다.
# (두 번째 인자 없이) 인자를 하나만 넣을 때는 소수점 첫째 자리에서 반올림한다.

# 다음은 round() 함수를 이용해서 소수점 특정 자릿수에서 반올림하는 예시이다.
# 흔히 코딩 테스트 문제에서는 실수형 데이터를 비교할 때 소수점 다섯 번째 자리에서 반올림한 결과가 같으면 정답으로 인정하는 식으로 처리한다.
# 그럴 때는 다음과 같이 round() 함수를 이용한다.

a = 0.3 + 0.6
print(round(a, 4))

if round(a, 4) == 0.9:
    print(True)
else:
    print(False)
#-----------------------------------------------------------------------------------------------------------------------

# 수 자료형의 연산
# 프로그래밍에서는 사칙연산(+, -, *, /)을 이용해 계산한다.
# 이 중에 나누기 연산자(/)를 주의해서 사용하자.
# 파이썬에서 나누기 연산자(/)는 나눠진 결과를 기본적으로 실수형으로 처리한다.
# 코딩 테스트 문제를 풀 때에는 나머지 연산자(%)를 이용해야 할 때가 많은데,
# 예를 들어 특정한 변수 a가 홀수인지 알아볼 때에는 'a를 2로 나눈 나머지가 1인지'확인한다.
# 이럴 때는 나머지 연산자(%)를 사용한다. 또한 나눈 결과에서 몫만을 얻고자 할 때는 몫 연산자(//)를 이용한다.

a = 7
b = 3

# 나누기
print(a / b)

# 나머지
print(a % b)

# 몫
print(a//b)

# 이 외에도 거듭제곱 연산자(**)를 비롯해 다양한 연산자 들이 존재한다.
# 거듭제곱 연산자는 x**y 형식으로 사용하는데 이는 x^y를 의미한다.

a = 5
b = 3

print(a ** b)
#-----------------------------------------------------------------------------------------------------------------------

# 리스트 자료형