# 부록A
# 코딩 테스트를 위한 파이썬 문법
print('-----------------------------------------------------------------------------------------------------------------------')
# 1. 자료형
# 수 자료형

# 정수형
# 정수형(Integer)은 정수를 다루는 자료형이며 정수형에는 양의 정수, 음의 정수, 0이 있다.

a = 1000    # 양의 정수
print(a)

a = -7      # 음의 정수
print(a)

# 0
a = 0
print(a)


# 실수형
# 실수형(Real Number)은 소수점 아래의 데이터를 포함하는 수 자료형으로 파이썬에서는 변수에 소수점을 분인 수를 대입하면 실수형 변수로 처리한다.
# 소수부가 0이거나, 정수부가 0인 소수는 0을 생략하고 작성할 수 있다.

# 양의 실수
a = 157.93
print(a)

# 음의 실수
a = -1837.2
print(a)

# 소수부가 0일 때 0을 생략
a = 5
print(a)

# 정수부가 0일 때 0을 생략
a = -7
print(a)
print('-----------------------------------------------------------------------------------------------------------------------')

# 실수형 데이터를 표현하는 방식으로 파이썬에서는 e나 E를 이용한 지수 표현 방식을 이용할 수 있다.
# e다음에 오는 수는 10의 지수부를 의미한다.
# 예를들어 1e9라고 입력하게 되면, 10의 9제곱(1,000,000,000)이 된다.
# 유효숫자e^지수 = 유효숫자 * 10^지수
# 예를 들어 최단 경로 문제에서는 도달할 수 없는 노드에 대하여 최단 거리르 '무한(INF)'로 설정하곤 한다.
# 최단 경로로 가능한 최댓값이 10억 미만이라면 무한(INF)를 표현할 때 10억을 이용할 수 있다.
# 또한 큰 수를 표현할 때, 0의 개수가 많아지게 되면 햇갈리므로 10억을 코드에 입력하는 것 보다는 1e9로 표현하는 것이 더 실수할 확률이 적다는 장점도 있다.
# 혹은 987,654,321라고 적으면 이게 1e9와 유사할 정도로 크므로 이렇게 적기도 한다.

# 10억의 지수 표현 방식
a = 1e9
print(a)

# 752.5
a = 75.25e1
print(a)

# 3.954
a = 3954e-3
print(a)
print('-----------------------------------------------------------------------------------------------------------------------')

# 보통 컴퓨터 시스템은 수 데이터를 처리할 때 2진수를 이용하며, 실수를 처리할 때 부동 소수점(Floating-point)방식을 이용한다.
# 오늘날 가장 널리 쓰이는 IEEE754 표준에서는 실수형을 저장하기 위해 4바이트, 혹은 8바이트라는 고정된 크기의 메모리를 할당하며,
# 이러한 이유로 인해 현대 컴퓨터 시스템은 대체로 실수 정보를 표현하는 정확도에 한계를 가진다.
# 예를 들어 10진수 체계에서는 0.3과 0.6을 더한 값이 0.9로 정확히 떨어지지만, 2진수에서는 0.9를 정확히 표현할 수 있는 방법이 없다.
# 물론 최대한 0.9와 가깝게 표현하지만 표현한 값이 정확히 0.9가 아닌 미세한 오차가 발생한다.
# 일반적으로 코딩 테스트 문제를 풀기 위해서 컴퓨터의 내부 동작 방식까지 자세히 알 필요는 없으나 컴퓨터가 실수를 정확히 표현하지 못한다는 사실은 기억하자.
# 다음 예시를 확인해보면, 0.3과 0.6을 더한 값이 0.8999999999999999로 저장되는 것을 알 수 있다.

a = 0.3 + 0.6
print(a)

if a == 0.9:
    print(True)
else:
    print(False)

# 따라서 소수점 값을 비교하는 작업이 필요한 문제라면 실수 값을 비교하지 못해서 원하는 결과를 얻지 못할 수 있다.
# 이럴 때는 round() 함수를 이용할 수 있다.
# round() 함수를 호출할 때는 인자(Argument)를 넣는데 첫 번째 인자는 실수형 데이터이고, 두 번째 인자는 (반올림하고자 하는 위치 -1)이다.
# 예를 들어 123.456을 소수점 셋째 자리에서 반올림 하려면 round(123.456, 2)라고 작성하며 결과는 123.45이다.
# (두 번째 인자 없이) 인자를 하나만 넣을 때는 소수점 첫째 자리에서 반올림한다.

# 다음은 round() 함수를 이용해서 소수점 특정 자릿수에서 반올림하는 예시이다.
# 흔히 코딩 테스트 문제에서는 실수형 데이터를 비교할 때 소수점 다섯 번째 자리에서 반올림한 결과가 같으면 정답으로 인정하는 식으로 처리한다.
# 그럴 때는 다음과 같이 round() 함수를 이용한다.

a = 0.3 + 0.6
print(round(a, 4))

if round(a, 4) == 0.9:
    print(True)
else:
    print(False)
print('-----------------------------------------------------------------------------------------------------------------------')

# 수 자료형의 연산
# 프로그래밍에서는 사칙연산(+, -, *, /)을 이용해 계산한다.
# 이 중에 나누기 연산자(/)를 주의해서 사용하자.
# 파이썬에서 나누기 연산자(/)는 나눠진 결과를 기본적으로 실수형으로 처리한다.
# 코딩 테스트 문제를 풀 때에는 나머지 연산자(%)를 이용해야 할 때가 많은데,
# 예를 들어 특정한 변수 a가 홀수인지 알아볼 때에는 'a를 2로 나눈 나머지가 1인지'확인한다.
# 이럴 때는 나머지 연산자(%)를 사용한다. 또한 나눈 결과에서 몫만을 얻고자 할 때는 몫 연산자(//)를 이용한다.

a = 7
b = 3

# 나누기
print(a / b)

# 나머지
print(a % b)

# 몫
print(a//b)

# 이 외에도 거듭제곱 연산자(**)를 비롯해 다양한 연산자 들이 존재한다.
# 거듭제곱 연산자는 x**y 형식으로 사용하는데 이는 x^y를 의미한다.

a = 5
b = 3

print(a ** b)
print('-----------------------------------------------------------------------------------------------------------------------')

# 리스트 자료형
# 리스트는 여러 개의 데이터를 연속적으로 담아 처리하기 위해 사용할 수 있다.
# 파이썬의 리스트 자료형은 C나 자바와 같은 프로그래밍 언어의 배열(Array) 기능을 포함하고 있으며,
# 내부적으로 연결 리스트 자료구조를 채택하고 있어서 append(), remove() 등의 메서드를 지원한다.
# 파이썬의 리스트는 C++의 STL, vector와 유사하며, 리스트 대신에 배열 혹은 테이블이라고 부르기도 한다.
print('-----------------------------------------------------------------------------------------------------------------------')

# 리스트 만들기
# 리스트는 대괄호 ([])안에 원소를 넣어 초기화하며, 쉼표(,)로 원소를 구분한다.
# 리스트의 원소에 접근할 때는 인덱스(Index) 값을 괄호 안에 넣는다.
# 이때 인덱스는 0부터 시작한다.
# 그리고 비어 있는 리스트를 선언하고자 할 때는 list() 혹은 간단히 대괄호([])를 이용할 수 있다.
# 1부터 9까지의 모든 정수 데이터를 담는 리스트를 만든 다음 특정한 인덱스의 원소에 접근하여 출력하는 예제를 확인해보자.

a = [1, 2, 3, 4, 5, 6, 7, 8, 9]
print(a)

# 인덱스 4, 즉 다섯 번째 원소에 접근
print(a[4])

# 빈 리스트 선언 방법 (1)
a = list()
print(a)

# 빈 리스트 선언 방법 (2)
a = []
print(a)

# 코딩 테스트 문제에서는 주로 크기가 N인 1차원 리스트를 초기화해야 하는데 다음 방식으로 초기화 하면 편리하다.
# 다음은 크기가 N이고, 모든 값이 0인 1차원 리스트를 초기화하는 소스코드다.

# 크기가 N이고, 모든 값이 0인 1차원 리스트 초기화
n = 10
a = [0] * n
print(a)
print('-----------------------------------------------------------------------------------------------------------------------')

# 리스트의 인덱싱과 슬라이싱
# 인덱스값을 입력하여 리스트의 특정한 원소에 접근하는 것을 인덱싱(Indexing)이라고 한다.
# 파이썬의 인덱스값은 양의 정수와 음의 정수를 모두 사용할 수 있으며, 음의 정수를 넣으면 원소를 거꾸로 탐색하게 된다.

# 예를 들어 인덱스 -1을 넣으면 가장 마지막 원소가 출력된다.
# 이런 성질을 이용해 인덱싱을 하여 특정 원소에 접근한 뒤에, 그 값을 간단하게 바꿀 수 있다.

a = [1, 2, 3, 4, 5, 6, 7, 8, 9]
# 뒤에서 첫 번째 원소 출력
print(a[-1])

# 뒤에서 세 번째 원소 출력
print(a[-3])

# 네 번째 원소 값 변경
a[3] = 7
print(a)

# 또한 리스트에서 연속적인 위치를 갖는 원소들을 가져와야 할 때는 슬라이싱(Slicing)을 이용할 수 있다.
# 이때는 대괄호 안에 콜론(:)을 넣어서 시작 인덱스와 (끝 인덱스 -1)을 설정할 수 있다.
# 예를 들어 a라는 리스트의 두 번째 원소부터 네 번쨰 원소까지의 모든 데이터를 갖는 리스트를 가져오고 싶다면 a[1:4}라고 넣는다.
# 앞서 말했듯이 리스트의 인덱스는 0부터 출발하기 때문에 두 번째 원소의 인덱스는 1이 된다.
# 그리고 끝 인덱스의 경우 1을 뺀 값의 인덱스까지 처리된다.
# 그래서 a[1:4]라고 작성하면 된다.

a = [1, 2, 3, 4, 5, 6, 7, 8, 9]

# 두 번쨰 원소부터 네 번째 원소까지
print(a[1:4])
print('-----------------------------------------------------------------------------------------------------------------------')

# 리스트 컴프리헨션
# 리스트 컴프리헨션은 리스트를 초기화하는 방법 중 하나이다.
# 리스트 컴프리헨션을 이용하면 대괄호([])안에 조건문과 반복문을 넣는 방식으로 리스트를 초기화할 수 있다.
# 간단히 0부터 19까지의 수 중에서 홀수만 포함하는 리스트를 만들고자 할 때는 다음과 같이 리스트를 초기화할 수 있다.
# 이 경우 한 줄의 소스코드로 리스트를 초기화할 수 있어 매우 간편하다.

# 0부터 19까지의 수 중에서 홀수만 포함되는 리스트
array = [i for i in range(20) if i % 2 == 1]
print(array)

# 참고로 위 소스코드를 일반적인 소스코드로  작성하면 아래와 같다.
array = []
for i in range(20):
    if i % 2 == 1:
        array.append(i)

print(array)

# 비교하면 어떠한가?
# 리스트 컴프리헨션을 이용했을 때의 소스코드가 훨씬 짧고 간결한 것을 알 수 있다.

# 또 다른 예시로 1부터 9까지 수의 제곱 값을 포함하는 리스트를 만들고자 할 때는 다음과 같이 리스트를 초기화할 수 있다.

# 1부터 9까지의 수의 제곱 값을 포함하는 리스트
array = [i * i for i in range(1,10)]
print(array)

# 이러한 리스트 컴프리헨션은 코딩 테스트에서 2차원 리스트를 초기화할 때 매우 효과적으로 사용될 수 있다.
# 예를 들어 N * M 크기의 2차원 리스트를 초기화할 때는 다음과 같이 사용한다.

# N * M 크기의 2차원 리스트 초기화
n = 3
m = 4
array = [[0] * m for _ in range(n)]
print(array)

# ※ 언더바(_)는 어떤 역할일까?
# 파이썬 자료구조/알고리즘에서는 반복을 수행하되 반복을 위한 변수의 값을 무시하고자 할 때 언더바(_)를 자주 사용한다.
# 예를 들어 1부터 9까지의 자연수를 더할 때는 (예시1)처럼 작성하지만, 단순히 "Hello World"를 5번 출력할 때는 (예시2)처럼 언더바(_)를 이용하여 무시할 수 있다.

# (예시1)
summary = 0
for i in range(1,10):
    summary += i
print(summary)

# (예시2)
for _ in range(5):
    print("Hello World")

# 참고로 특정 크기의 2차원 리스트를 초기화할 떄는 반드시 리스트 컴프리헨션을 이용해야 한다.
# 만약에 다음과 같이 N * M 크기의 2차원 리스트를 초기화한다면, 의도하지 않은 결과가 나올 수 있다.
# N * M 크기의 2차원 리스트 초기화 (잘못된 방법)
n = 3
m = 4
array = [[0] * m] * n
print(array)

array[1][1] = 5
print(array)
# 실행 결과를 확인해보면 array[1][1] 의 값을 5로 바꾸었을 뿐인데,
# 3개의 리스트에서 인덱스 1에 해당하는 원소들의 값이 모두 5로 바뀐 것을 확인할 수 있다.
# 이는 내부적으로 포함된 3개의 리스트가 모두 동일한 객체에 대한 3개의 레퍼런스로 인식되기 때문이다.
# 따라서 특정한 크기를 가지는 2차원 리스트를 초기화할 때에는 리스트 컴프리헨션을 이용해야 한다는 점을 기억하자.
print('-----------------------------------------------------------------------------------------------------------------------')

# 리스트 관련 기타 메서드
